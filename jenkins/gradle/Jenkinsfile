#!groovy

properties([
        parameters([
                string(name: 'RELEASE_VERSION', defaultValue: '9.0.0', description: ''),
                string(name: 'POST_RELEASE_SNAPSHOT_VERSION', defaultValue: '9.0.1-SNAPSHOT', description: ''),
                string(name: 'TEST_ONLY', defaultValue: 'true', description: ''),
                string(name: 'DRY_RUN', defaultValue: 'true', description: '')
        ])
])

def sharedLib = new SharedLib()

def commitGradlePluginReleaseVersion() {
    sh "(cd lightning-gradle-plugin; sed -i -e \"/lightningGradlePluginVersion=/ s/=.*/=${params.RELEASE_VERSION}/\" gradle.properties)"
    sh "(cd lightning-gradle-plugin; cat gradle.properties)"
    sh "git add -A; git commit -m 'Release version bump'"
}

def commitGradlePluginSnapshotVersion() {
    sh "(cd lightning-gradle-plugin; sed -i -e \"/lightningGradlePluginVersion=/ s/=.*/=${params.POST_RELEASE_SNAPSHOT_VERSION}/\" gradle.properties)"
    sh "(cd lightning-gradle-plugin; cat gradle.properties)"
    sh "git add -A; git commit -m 'Post-release version bump'"
}

def testGradlePlugin() {
    try {
        sh "(cd lightning-gradle-plugin; ./gradlew clean check)"
    } finally {
        junit 'lightning-gradle-plugin/build/test-results/integrationTest/*.xml'
    }
}

def tagGradlePluginRelease() {
    sh "git tag gradle-plugin-${params.RELEASE_VERSION}"
}

def releaseGradlePlugin() {
    // Maven Central
    sh '(cd lightning-gradle-plugin; ./gradlew clean uploadArchives)'
    // Gradle Plugin Portal
    sh "(cd lightning-gradle-plugin; ./gradlew clean publishPlugins)"

}

disableConcurrentBuilds()

timestamps {
    node {
        stage('Prepare') {
            sharedLib.cleanupWorkspaceAndCloneRepo()
            sharedLib.purge()
        }
        stage('Set release version number') {
            if ("${params.TEST_ONLY}" == "false") {
                commitGradlePluginReleaseVersion()
            }
        }
        stage('Run checks') {
            testGradlePlugin()
        }
        stage('Tag release') {
            if ("${params.TEST_ONLY}" == "false") {
                tagGradlePluginRelease()
            }
        }
        stage('Release') {
            if ("${params.TEST_ONLY}" == "false" && "${params.DRY_RUN}" == "false" && "${env.BRANCH_NAME}" == "master") {
                releaseGradlePlugin()
            }
        }
        stage('Set snapshot version number') {
            if ("${params.TEST_ONLY}" == "false") {
                commitGradlePluginSnapshotVersion()
            }
        }
        stage('Push release to origin/master') {
            if ("${params.TEST_ONLY}" == "false" && "${params.DRY_RUN}" == "false" && "${env.BRANCH_NAME}" == "master") {
                sharedLib.push()
            }
        }
    }
}