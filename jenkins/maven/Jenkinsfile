#!groovy

def sharedLib = new SharedLib()

def runIntegrationTests() {
    try {
        withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
            sh "mvn -pl jmeter-lightning-maven-plugin clean verify"
        }
    } finally {
        jacoco execPattern: '**/jacoco.exec'
    }
}

def commitMavenPluginReleaseVersion() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "(cd jmeter-lightning-maven-plugin; mvn versions:set -DnewVersion=${RELEASE_VERSION})"
        sh "git add -A; git commit -m 'JMeter Lightning Maven Plugin release version bump'"
    }
}

def commitMavenPluginSnapshotVersion() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "(cd jmeter-lightning-maven-plugin; mvn versions:set -DnewVersion=${POST_RELEASE_SNAPSHOT_VERSION})"
        sh "git add -A; git commit -m 'JMeter Lightning Maven Plugin post-release version bump'"
    }
}

def tagMavenPluginRelease() {
    sh "git tag maven-plugin-${RELEASE_VERSION}"
}

def releaseMavenPlugin() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "mvn -pl jmeter-lightning-maven-plugin clean deploy -P release -Dgpg.passphrase=${GPG_PASSPHRASE}"
    }
}


timestamps {
    node {
        stage('Prepare') {
            sharedLib.cleanupWorkspaceAndCloneRepo()
            sharedLib.purge()
        }
        stage('Set release version number') {
            if ("${TEST_ONLY}" == "false") {
                commitMavenPluginReleaseVersion()
            }
        }
        stage('Integration test') {
            runIntegrationTests()
        }
        stage('Tag release') {
            if ("${TEST_ONLY}" == "false") {
                tagMavenPluginRelease()
            }
        }
        stage('Release') {
            if ("${TEST_ONLY}" == "false" && "${DRY_RUN}" == "false") {
                releaseMavenPlugin()
            }
        }
        stage('Set snapshot version number') {
            if ("${TEST_ONLY}" == "false") {
                commitMavenPluginSnapshotVersion()
            }
        }
        stage('Push release to origin/master') {
            if ("${TEST_ONLY}" == "false" && "${DRY_RUN}" == "false") {
                sharedLib.push()
            }
        }
    }
}