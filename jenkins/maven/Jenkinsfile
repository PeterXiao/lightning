#!groovy

properties([
        parameters([
                string(name: 'RELEASE_VERSION', defaultValue: '9.0.0', description: ''),
                string(name: 'POST_RELEASE_SNAPSHOT_VERSION', defaultValue: '9.0.1-SNAPSHOT', description: ''),
                string(name: 'GPG_PASSPHRASE', defaultValue: '', description: ''),
                string(name: 'TEST_ONLY', defaultValue: 'true', description: ''),
                string(name: 'DRY_RUN', defaultValue: 'true', description: '')
        ])
])

def sharedLib = new SharedLib()

def runIntegrationTests() {
    try {
        withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
            sh "mvn -pl jmeter-lightning-maven-plugin clean verify"
        }
    } finally {
        jacoco execPattern: '**/jacoco.exec'
    }
}

def commitMavenPluginReleaseVersion() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "(cd jmeter-lightning-maven-plugin; mvn versions:set -DnewVersion=${params.RELEASE_VERSION})"
        sh "git add -A; git commit -m 'JMeter Lightning Maven Plugin release version bump'"
    }
}

def commitMavenPluginSnapshotVersion() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "(cd jmeter-lightning-maven-plugin; mvn versions:set -DnewVersion=${params.POST_RELEASE_SNAPSHOT_VERSION})"
        sh "git add -A; git commit -m 'JMeter Lightning Maven Plugin post-release version bump'"
    }
}

def tagMavenPluginRelease() {
    sh "git tag maven-plugin-${params.RELEASE_VERSION}"
}

def releaseMavenPlugin() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "mvn -pl jmeter-lightning-maven-plugin clean deploy -P release -Dgpg.passphrase=${params.GPG_PASSPHRASE}"
    }
}

disableConcurrentBuilds()

timestamps {
    node {
        stage('Prepare') {
            sharedLib.cleanupWorkspaceAndCloneRepo()
            sharedLib.purge()
        }
        stage('Set release version number') {
            if ("${params.TEST_ONLY}" == "false") {
                commitMavenPluginReleaseVersion()
            }
        }
        stage('Integration test') {
            runIntegrationTests()
        }
        stage('Tag release') {
            if ("${params.TEST_ONLY}" == "false") {
                tagMavenPluginRelease()
            }
        }
        stage('Release') {
            if ("${params.TEST_ONLY}" == "false" && "${params.DRY_RUN}" == "false") {
                releaseMavenPlugin()
            }
        }
        stage('Set snapshot version number') {
            if ("${params.TEST_ONLY}" == "false") {
                commitMavenPluginSnapshotVersion()
            }
        }
        stage('Push release to origin/master') {
            if ("${params.TEST_ONLY}" == "false" && "${params.DRY_RUN}" == "false") {
                sharedLib.push()
            }
        }
    }
}