#!groovy

properties([
        [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10']],
        parameters([
                string(name: 'RELEASE_VERSION', defaultValue: '9.0.0', description: ''),
                string(name: 'POST_RELEASE_SNAPSHOT_VERSION', defaultValue: '9.0.1-SNAPSHOT', description: ''),
                string(name: 'TEST_ONLY', defaultValue: 'true', description: ''),
                string(name: 'DRY_RUN', defaultValue: 'true', description: '')
        ])
])

def sharedLib = new SharedLib()

def tagStandaloneRelease() {
    sh "git tag standalone-${params.RELEASE_VERSION}"
}

def buildAndTest() {
    try {
        withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
            sh 'mvn -pl lightning-standalone clean compile assembly:single test'
        }
    } finally {
        junit 'lightning-standalone/target/surefire-reports/junitreports/*.xml'
        jacoco execPattern: '**/jacoco.exec'
    }
}

def commitStandaloneReleaseVersion() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        dir('lightning-standalone') {
            sh "mvn versions:set -DnewVersion=${params.RELEASE_VERSION}"
        }
        sh "git add -A; git commit -m 'Lightning Standalone release version bump'"
    }
}

def commitStandaloneSnapshotVersion() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        dir('lightning-standalone') {
            sh "mvn versions:set -DnewVersion=${params.POST_RELEASE_SNAPSHOT_VERSION}"
        }
        sh "git add -A; git commit -m 'Lightning Standalone post-release version bump'"
    }
}

def archiveStandaloneJar() {
    archiveArtifacts artifacts: 'lightning-standalone/target/lightning-standalone-*.jar'
}

disableConcurrentBuilds()

timestamps {
    lock('lightning-pipeline') {
        node('linux') {
            stage('Prepare') {
                sharedLib.cleanupWorkspaceAndCloneRepo()
                sh "git checkout ${env.BRANCH_NAME}"
                sharedLib.purge()
            }
            stage('Set release version number') {
                if ("${params.TEST_ONLY}" == "false") {
                    commitLambdaReleaseVersion()
                }
            }
            stage('Run unit tests, generate JAR file and run E2E tests') {
                buildAndTest()
            }
            stage('Tag release') {
                if ("${params.TEST_ONLY}" == "false") {
                    tagLambdaRelease()
                }
            }
            stage('Archive JAR') {
                archiveStandaloneJar()
            }
            stage('Set snapshot version number') {
                if ("${params.TEST_ONLY}" == "false") {
                    commitLambdaSnapshotVersion()
                }
            }
            stage('Push release to origin/master') {
                if ("${params.TEST_ONLY}" == "false" && "${params.DRY_RUN}" == "false" && env.BRANCH_NAME == "master") {
                    sharedLib.push()
                }
            }
        }
    }
}