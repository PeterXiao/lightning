#!groovy

def sharedLib = new SharedLib()

def tagStandaloneRelease() {
    sh "git tag standalone-${RELEASE_VERSION}"
}

def buildAndTest() {
    try {
        withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
            sh 'mvn -pl lightning-standalone clean compile assembly:single test'
        }
    } finally {
        junit 'lightning-standalone/target/surefire-reports/junitreports/*.xml'
        jacoco execPattern: '**/jacoco.exec'
    }
}

def commitStandaloneReleaseVersion() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "(cd lightning-standalone; mvn versions:set -DnewVersion=${RELEASE_VERSION})"
        sh "git add -A; git commit -m 'Lightning Standalone release version bump'"
    }
}

def commitStandaloneSnapshotVersion() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "(cd lightning-standalone; mvn versions:set -DnewVersion=${POST_RELEASE_SNAPSHOT_VERSION})"
        sh "git add -A; git commit -m 'Lightning Standalone post-release version bump'"
    }
}

def archiveStandaloneJar() {
    archiveArtifacts artifacts: 'lightning-standalone/target/lightning-standalone-*.jar'
}


timestamps {
    node {
        stage('Prepare') {
            sharedLib.cleanupWorkspaceAndCloneRepo()
            sharedLib.purge()
        }
        stage('Set release version number') {
            if ("${TEST_ONLY}" == "false") {
                commitStandaloneReleaseVersion()
            }
        }
        stage('Run unit tests, generate JAR file and run E2E tests') {
            buildAndTest()
        }
        stage('Tag release') {
            if ("${TEST_ONLY}" == "false") {
                tagStandaloneRelease()
            }
        }
        stage('Archive JAR') {
            archiveStandaloneJar()
        }
        stage('Set snapshot version number') {
            if ("${TEST_ONLY}" == "false") {
                commitStandaloneSnapshotVersion()
            }
        }
        stage('Push release to origin/master') {
            if ("${TEST_ONLY}" == "false" && "${DRY_RUN}" == "false") {
                sharedLib.push()
            }
        }
    }
}