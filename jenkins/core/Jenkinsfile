#!groovy

properties([
        parameters([
                string(name: 'RELEASE_VERSION', defaultValue: '9.0.0', description: ''),
                string(name: 'POST_RELEASE_SNAPSHOT_VERSION', defaultValue: '9.0.1-SNAPSHOT', description: ''),
                string(name: 'GPG_PASSPHRASE', defaultValue: '', description: ''),
                string(name: 'TEST_ONLY', defaultValue: 'true', description: ''),
                string(name: 'DRY_RUN', defaultValue: 'true', description: '')
        ])
])

def sharedLib = new SharedLib()

def testAndInstallCore() {
    try {
        withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
            sh 'mvn -pl lightning-core clean test install'
        }
    } finally {
        junit 'lightning-core/target/surefire-reports/junitreports/*.xml'
        jacoco execPattern: '**/jacoco.exec'
    }
}

def commitCoreReleaseVersion() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "(cd lightning-core; mvn versions:set -DnewVersion=${params.RELEASE_VERSION} -DprocessDependencies=false)"
        sh "git add -A; git commit -m 'Lightning Core release version bump'"
    }
}

def commitCoreSnapshotVersion() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "(cd lightning-core; mvn versions:set -DnewVersion=${params.POST_RELEASE_SNAPSHOT_VERSION} -DprocessDependencies=false)"
        sh "git add -A; git commit -m 'Lightning Core post-release version bump'"
    }
}

def releaseCore() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        sh "mvn -pl lightning-core clean deploy -P release -Dgpg.passphrase=${params.GPG_PASSPHRASE}"
    }
}

def tagCoreRelease() {
    sh "git tag core-${params.RELEASE_VERSION}"
}

disableConcurrentBuilds()

timestamps {
    node {
        stage('Prepare') {
            sharedLib.cleanupWorkspaceAndCloneRepo()
            sharedLib.purge()
        }
        stage('Set release version number') {
            if ("${params.TEST_ONLY}" == "false") {
                commitCoreReleaseVersion()
            }
        }
        stage('Test and install') {
            testAndInstallCore()
        }
        stage('Tag release') {
            if ("${params.TEST_ONLY}" == "false") {
                tagCoreRelease()
            }
        }
        stage('Release') {
            if ("${params.TEST_ONLY}" == "false" && "${params.DRY_RUN}" == "false") {
                releaseCore()
            }
        }
        stage('Set snapshot version number') {
            if ("${params.TEST_ONLY}" == "false") {
                commitCoreSnapshotVersion()
            }
        }
        stage('Push release to origin/master') {
            if ("${params.TEST_ONLY}" == "false" && "${params.DRY_RUN}" == "false") {
                sharedLib.push()
            }
        }
    }
}