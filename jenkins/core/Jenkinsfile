#!groovy

library "SharedLib@${env.BRANCH_NAME}"

properties([
        [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10']],
        parameters([
                string(name: 'RELEASE_VERSION', defaultValue: '9.0.0', description: ''),
                string(name: 'POST_RELEASE_SNAPSHOT_VERSION', defaultValue: '9.0.1-SNAPSHOT', description: ''),
                string(name: 'TEST_ONLY', defaultValue: 'true', description: ''),
                string(name: 'DRY_RUN', defaultValue: 'true', description: '')
        ])
])

def testAndInstallCore() {
    try {
        sh './mvnw -pl lightning-core clean install -DmockS3'
    } finally {
        junit 'lightning-core/target/surefire-reports/junitreports/*.xml'
        jacoco execPattern: '**/jacoco*.exec'
    }
}

def commitCoreReleaseVersion() {
    sh "./mvnw -pl lightning-core versions:set -DnewVersion=${params.RELEASE_VERSION} -DprocessDependencies=false"
    sh "git add -A; git commit -m 'Lightning Core release version bump'"
}

def commitCoreSnapshotVersion() {
    sh "./mvnw -pl lightning-core versions:set -DnewVersion=${params.POST_RELEASE_SNAPSHOT_VERSION} -DprocessDependencies=false"
    sh "git add -A; git commit -m 'Lightning Core post-release version bump'"
}

def releaseCore() {
    withCredentials([string(credentialsId: 'gpg-passphrase', variable: 'GPGPP')]) {
        sh "./mvnw -pl lightning-core clean deploy -P release -DmockS3 -Dgpg.passphrase=${GPGPP}"
    }
}

def tagCoreRelease() {
    sh "git tag core-${params.RELEASE_VERSION}"
}

disableConcurrentBuilds()

timestamps {
    node('linux') {
        stage('Prepare') {
            cleanupWorkspaceAndCloneRepo()
            sh "git checkout ${env.BRANCH_NAME}"
            purge()
        }
        stage('Set release version number') {
            if ("${params.TEST_ONLY}" == "false") {
                commitCoreReleaseVersion()
            }
        }
        stage('Verify and install') {
            testAndInstallCore()
        }
        stage('Tag release') {
            if ("${params.TEST_ONLY}" == "false") {
                tagCoreRelease()
            }
        }
        stage('Release') {
            if ("${params.TEST_ONLY}" == "false" && "${params.DRY_RUN}" == "false" && env.BRANCH_NAME == "master") {
                releaseCore()
            }
        }
        stage('Set snapshot version number') {
            if ("${params.TEST_ONLY}" == "false") {
                commitCoreSnapshotVersion()
            }
        }
        stage('Push release to origin/master') {
            if ("${params.TEST_ONLY}" == "false" && "${params.DRY_RUN}" == "false" && env.BRANCH_NAME == "master") {
                push()
            }
        }
    }
}