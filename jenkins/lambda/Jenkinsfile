#!groovy

properties([
        [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10']],
        parameters([
                string(name: 'RELEASE_VERSION', defaultValue: '9.0.0', description: ''),
                string(name: 'POST_RELEASE_SNAPSHOT_VERSION', defaultValue: '9.0.1-SNAPSHOT', description: ''),
                string(name: 'TEST_ONLY', defaultValue: 'true', description: ''),
                string(name: 'DRY_RUN', defaultValue: 'true', description: '')
        ])
])

def sharedLib = new SharedLib()

def tagLambdaRelease() {
    sh "git tag lambda-${params.RELEASE_VERSION}"
}

def buildAndUnitTest() {
    try {
        withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
            sh 'mvn -pl lightning-aws-lambda clean package'
        }
    } finally {
        junit 'lightning-aws-lambda/target/surefire-reports/junitreports/*.xml'
        jacoco execPattern: '**/jacoco.exec'
    }
}

def commitLambdaReleaseVersion() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        dir('lightning-aws-lambda') {
            sh "mvn versions:set -DnewVersion=${params.RELEASE_VERSION}"
        }
        sh "git add -A; git commit -m 'Lightning AWS Lambda release version bump'"
    }
}

def commitLambdaSnapshotVersion() {
    withEnv(["PATH+MAVEN=${tool 'M3'}/bin"]) {
        dir('lightning-aws-lambda') {
            sh "mvn versions:set -DnewVersion=${params.POST_RELEASE_SNAPSHOT_VERSION}"
        }
        sh "git add -A; git commit -m 'Lightning AWS Lambda post-release version bump'"
    }
}

def archiveLambdaJar() {
    dir('lightning-aws-lambda') {
        sh "mv target/lightning-aws-lambda*.jar target/lightning-aws-lambda-${params.RELEASE_VERSION}.jar"
        archiveArtifacts artifacts: 'target/lightning-aws-lambda*.jar'
    }
}

disableConcurrentBuilds()

timestamps {
    lock('lightning-pipeline') {
        node('linux') {
            stage('Prepare') {
                sharedLib.cleanupWorkspaceAndCloneRepo()
                sh "git checkout ${env.BRANCH_NAME}"
                sharedLib.purge()
            }
            stage('Set release version number') {
                if ("${params.TEST_ONLY}" == "false") {
                    commitLambdaReleaseVersion()
                }
            }
            stage('Build and unit test') {
                buildAndUnitTest()
            }
            stage('Deploy to AWS') {
                dir('lightning-aws-lambda') {
                    sh 'aws s3 cp target/lightning-aws-lambda-*.jar s3://deliverymind.co.uk-lightning-aws-lambda-jar/lightning-aws-lambda.jar --region eu-west-2'
                    sh 'aws lambda update-function-code --function-name Lightning --s3-bucket deliverymind.co.uk-lightning-aws-lambda-jar --s3-key lightning-aws-lambda.jar --region eu-west-2'
                    sh 'aws lambda update-function-configuration --function-name Lightning --timeout 30 --memory-size 192 --region eu-west-2'
                    sh 'aws lambda put-function-concurrency --function-name Lightning --reserved-concurrent-executions 1 --region eu-west-2'
                }
            }
            stage('Test end-to-end') {
                dir('lightning-aws-lambda') {
                    sh 'aws s3 sync src/test/resources s3://deliverymind.co.uk-lightning-aws-lambda --delete --region eu-west-2'
                    sh './src/test/scripts/file/junit.sh'
                    sh './src/test/scripts/exit/code/report_2_0.sh'
                    sh './src/test/scripts/exit/code/report_2_1.sh'
                    sh './src/test/scripts/exit/code/verify_1_1_1.sh'
                    sh './src/test/scripts/exit/code/verify_3_0_0.sh'
                    sh './src/test/scripts/exit/code/verify_3_0_0_2s.sh'
                    sh './src/test/scripts/console/output/report_10_0.sh'
                    sh './src/test/scripts/console/output/verify_1_1_1.sh'
                    sh './src/test/scripts/console/output/verify_3_0_0.sh'
                    sh './src/test/scripts/console/output/verify_3_0_0_2s.sh'
                }
                stage('Volume testing') {
                    dir('lightning-aws-lambda') {
                        sh '(cd large-volume-data-generator; ./generate-100mb-csv.sh)'
                        sh 'aws lambda update-function-configuration --function-name Lightning --timeout 60 --memory-size 1536 --region eu-west-2'
                        sh 'aws s3 cp large-volume-data-generator/jmeter-results.csv s3://deliverymind.co.uk-lightning-aws-lambda/csv/jmeter/100mb.csv --region eu-west-2'
                        sh './src/test/scripts/volume/volume.sh'
                        sh 'aws lambda update-function-configuration --function-name Lightning --timeout 30 --memory-size 192 --region eu-west-2'
                    }
                }
            }
            stage('Tag release') {
                if ("${params.TEST_ONLY}" == "false") {
                    tagLambdaRelease()
                }
            }
            stage('Archive JAR') {
                archiveLambdaJar()
            }
            stage('Set snapshot version number') {
                if ("${params.TEST_ONLY}" == "false") {
                    commitLambdaSnapshotVersion()
                }
            }
            stage('Push release to origin/master') {
                if ("${params.TEST_ONLY}" == "false" && "${params.DRY_RUN}" == "false" && env.BRANCH_NAME == "master") {
                    sharedLib.push()
                }
            }
        }
    }
}